//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CurrencyComputer.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class CurrencyComputerParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, DIGIT=12, SPACE=13;
	public const int
		RULE_input = 0, RULE_expression = 1, RULE_amountComposite = 2, RULE_amountSignedConvertible = 3, 
		RULE_amountSigned = 4, RULE_operatorAndSpaces = 5, RULE_operator = 6, 
		RULE_amount = 7, RULE_currencyRight = 8, RULE_currencyLeft = 9, RULE_number = 10, 
		RULE_conversion = 11;
	public static readonly string[] ruleNames = {
		"input", "expression", "amountComposite", "amountSignedConvertible", "amountSigned", 
		"operatorAndSpaces", "operator", "amount", "currencyRight", "currencyLeft", 
		"number", "conversion"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "':'", "'-'", "'+'", "'eur'", "'r'", "'$'", "'.'", "'ToEuro'", 
		"'ToDollar'", "'ToRub'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"DIGIT", "SPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CurrencyComputer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CurrencyComputerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CurrencyComputerParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CurrencyComputerParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class InputContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConversionContext conversion() {
			return GetRuleContext<ConversionContext>(0);
		}
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICurrencyComputerVisitor<TResult> typedVisitor = visitor as ICurrencyComputerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 0, RULE_input);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24; expression();
			State = 25; Match(T__0);
			State = 26; conversion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public AmountCompositeContext[] amountComposite() {
			return GetRuleContexts<AmountCompositeContext>();
		}
		public AmountCompositeContext amountComposite(int i) {
			return GetRuleContext<AmountCompositeContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICurrencyComputerVisitor<TResult> typedVisitor = visitor as ICurrencyComputerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 2, RULE_expression);
		try {
			State = 34;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 28; amountComposite();
				State = 29; expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 31; amountComposite();
				State = 32; amountComposite();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmountCompositeContext : ParserRuleContext {
		public AmountSignedContext amountSigned() {
			return GetRuleContext<AmountSignedContext>(0);
		}
		public AmountSignedConvertibleContext amountSignedConvertible() {
			return GetRuleContext<AmountSignedConvertibleContext>(0);
		}
		public AmountCompositeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amountComposite; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICurrencyComputerVisitor<TResult> typedVisitor = visitor as ICurrencyComputerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmountComposite(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmountCompositeContext amountComposite() {
		AmountCompositeContext _localctx = new AmountCompositeContext(Context, State);
		EnterRule(_localctx, 4, RULE_amountComposite);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 36; amountSigned();
				}
				break;
			case 2:
				{
				State = 37; amountSignedConvertible();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmountSignedConvertibleContext : ParserRuleContext {
		public AmountSignedContext amountSigned() {
			return GetRuleContext<AmountSignedContext>(0);
		}
		public ConversionContext conversion() {
			return GetRuleContext<ConversionContext>(0);
		}
		public AmountSignedConvertibleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amountSignedConvertible; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICurrencyComputerVisitor<TResult> typedVisitor = visitor as ICurrencyComputerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmountSignedConvertible(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmountSignedConvertibleContext amountSignedConvertible() {
		AmountSignedConvertibleContext _localctx = new AmountSignedConvertibleContext(Context, State);
		EnterRule(_localctx, 6, RULE_amountSignedConvertible);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; amountSigned();
			State = 41; Match(T__1);
			State = 42; conversion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmountSignedContext : ParserRuleContext {
		public AmountContext amount() {
			return GetRuleContext<AmountContext>(0);
		}
		public OperatorAndSpacesContext operatorAndSpaces() {
			return GetRuleContext<OperatorAndSpacesContext>(0);
		}
		public AmountSignedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amountSigned; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICurrencyComputerVisitor<TResult> typedVisitor = visitor as ICurrencyComputerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmountSigned(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmountSignedContext amountSigned() {
		AmountSignedContext _localctx = new AmountSignedContext(Context, State);
		EnterRule(_localctx, 8, RULE_amountSigned);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << SPACE))) != 0)) {
				{
				State = 44; operatorAndSpaces();
				}
			}

			State = 47; amount();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorAndSpacesContext : ParserRuleContext {
		public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public ITerminalNode[] SPACE() { return GetTokens(CurrencyComputerParser.SPACE); }
		public ITerminalNode SPACE(int i) {
			return GetToken(CurrencyComputerParser.SPACE, i);
		}
		public OperatorAndSpacesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAndSpaces; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICurrencyComputerVisitor<TResult> typedVisitor = visitor as ICurrencyComputerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorAndSpaces(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAndSpacesContext operatorAndSpaces() {
		OperatorAndSpacesContext _localctx = new OperatorAndSpacesContext(Context, State);
		EnterRule(_localctx, 10, RULE_operatorAndSpaces);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SPACE) {
				{
				{
				State = 49; Match(SPACE);
				}
				}
				State = 54;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 55; @operator();
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SPACE) {
				{
				{
				State = 56; Match(SPACE);
				}
				}
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICurrencyComputerVisitor<TResult> typedVisitor = visitor as ICurrencyComputerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 12, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			_la = TokenStream.LA(1);
			if ( !(_la==T__2 || _la==T__3) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmountContext : ParserRuleContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public CurrencyRightContext currencyRight() {
			return GetRuleContext<CurrencyRightContext>(0);
		}
		public CurrencyLeftContext currencyLeft() {
			return GetRuleContext<CurrencyLeftContext>(0);
		}
		public AmountContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_amount; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICurrencyComputerVisitor<TResult> typedVisitor = visitor as ICurrencyComputerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmount(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmountContext amount() {
		AmountContext _localctx = new AmountContext(Context, State);
		EnterRule(_localctx, 14, RULE_amount);
		try {
			State = 70;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DIGIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 64; number();
				State = 65; currencyRight();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 2);
				{
				State = 67; currencyLeft();
				State = 68; number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CurrencyRightContext : ParserRuleContext {
		public CurrencyRightContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_currencyRight; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICurrencyComputerVisitor<TResult> typedVisitor = visitor as ICurrencyComputerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurrencyRight(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CurrencyRightContext currencyRight() {
		CurrencyRightContext _localctx = new CurrencyRightContext(Context, State);
		EnterRule(_localctx, 16, RULE_currencyRight);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			_la = TokenStream.LA(1);
			if ( !(_la==T__4 || _la==T__5) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CurrencyLeftContext : ParserRuleContext {
		public CurrencyLeftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_currencyLeft; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICurrencyComputerVisitor<TResult> typedVisitor = visitor as ICurrencyComputerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurrencyLeft(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CurrencyLeftContext currencyLeft() {
		CurrencyLeftContext _localctx = new CurrencyLeftContext(Context, State);
		EnterRule(_localctx, 18, RULE_currencyLeft);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode[] DIGIT() { return GetTokens(CurrencyComputerParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(CurrencyComputerParser.DIGIT, i);
		}
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICurrencyComputerVisitor<TResult> typedVisitor = visitor as ICurrencyComputerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 20, RULE_number);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 76; Match(DIGIT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 79;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 81; Match(T__7);
				State = 83;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 82; Match(DIGIT);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 85;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversionContext : ParserRuleContext {
		public ConversionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversion; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICurrencyComputerVisitor<TResult> typedVisitor = visitor as ICurrencyComputerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConversionContext conversion() {
		ConversionContext _localctx = new ConversionContext(Context, State);
		EnterRule(_localctx, 22, RULE_conversion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__9) | (1L << T__10))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xF', '^', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '%', '\n', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', ')', '\n', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x5', 
		'\x6', '\x30', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\a', 
		'\a', '\x35', '\n', '\a', '\f', '\a', '\xE', '\a', '\x38', '\v', '\a', 
		'\x3', '\a', '\x3', '\a', '\a', '\a', '<', '\n', '\a', '\f', '\a', '\xE', 
		'\a', '?', '\v', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 'I', 
		'\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\f', '\x6', '\f', 'P', '\n', '\f', '\r', '\f', '\xE', '\f', 'Q', '\x3', 
		'\f', '\x3', '\f', '\x6', '\f', 'V', '\n', '\f', '\r', '\f', '\xE', '\f', 
		'W', '\x5', '\f', 'Z', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x2', '\x2', '\xE', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x2', '\x5', '\x3', '\x2', '\x5', '\x6', 
		'\x3', '\x2', '\a', '\b', '\x3', '\x2', '\v', '\r', '\x2', 'Z', '\x2', 
		'\x1A', '\x3', '\x2', '\x2', '\x2', '\x4', '$', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '(', '\x3', '\x2', '\x2', '\x2', '\b', '*', '\x3', '\x2', '\x2', 
		'\x2', '\n', '/', '\x3', '\x2', '\x2', '\x2', '\f', '\x36', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '@', '\x3', '\x2', '\x2', '\x2', '\x10', 'H', '\x3', 
		'\x2', '\x2', '\x2', '\x12', 'J', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'L', '\x3', '\x2', '\x2', '\x2', '\x16', 'O', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '[', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1B', '\x5', '\x4', 
		'\x3', '\x2', '\x1B', '\x1C', '\a', '\x3', '\x2', '\x2', '\x1C', '\x1D', 
		'\x5', '\x18', '\r', '\x2', '\x1D', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\x1F', '\x5', '\x6', '\x4', '\x2', '\x1F', ' ', '\x5', '\x4', 
		'\x3', '\x2', ' ', '%', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\x5', 
		'\x6', '\x4', '\x2', '\"', '#', '\x5', '\x6', '\x4', '\x2', '#', '%', 
		'\x3', '\x2', '\x2', '\x2', '$', '\x1E', '\x3', '\x2', '\x2', '\x2', '$', 
		'!', '\x3', '\x2', '\x2', '\x2', '%', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'&', ')', '\x5', '\n', '\x6', '\x2', '\'', ')', '\x5', '\b', '\x5', '\x2', 
		'(', '&', '\x3', '\x2', '\x2', '\x2', '(', '\'', '\x3', '\x2', '\x2', 
		'\x2', ')', '\a', '\x3', '\x2', '\x2', '\x2', '*', '+', '\x5', '\n', '\x6', 
		'\x2', '+', ',', '\a', '\x4', '\x2', '\x2', ',', '-', '\x5', '\x18', '\r', 
		'\x2', '-', '\t', '\x3', '\x2', '\x2', '\x2', '.', '\x30', '\x5', '\f', 
		'\a', '\x2', '/', '.', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\x31', '\x3', '\x2', '\x2', '\x2', '\x31', 
		'\x32', '\x5', '\x10', '\t', '\x2', '\x32', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x35', '\a', '\xF', '\x2', '\x2', '\x34', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x35', '\x38', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x34', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x37', '\x39', '\x3', '\x2', '\x2', '\x2', '\x38', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '\x39', '=', '\x5', '\xE', '\b', '\x2', ':', '<', 
		'\a', '\xF', '\x2', '\x2', ';', ':', '\x3', '\x2', '\x2', '\x2', '<', 
		'?', '\x3', '\x2', '\x2', '\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', 
		'=', '>', '\x3', '\x2', '\x2', '\x2', '>', '\r', '\x3', '\x2', '\x2', 
		'\x2', '?', '=', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\t', '\x2', 
		'\x2', '\x2', '\x41', '\xF', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', 
		'\x5', '\x16', '\f', '\x2', '\x43', '\x44', '\x5', '\x12', '\n', '\x2', 
		'\x44', 'I', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\x5', '\x14', 
		'\v', '\x2', '\x46', 'G', '\x5', '\x16', '\f', '\x2', 'G', 'I', '\x3', 
		'\x2', '\x2', '\x2', 'H', '\x42', '\x3', '\x2', '\x2', '\x2', 'H', '\x45', 
		'\x3', '\x2', '\x2', '\x2', 'I', '\x11', '\x3', '\x2', '\x2', '\x2', 'J', 
		'K', '\t', '\x3', '\x2', '\x2', 'K', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'L', 'M', '\a', '\t', '\x2', '\x2', 'M', '\x15', '\x3', '\x2', '\x2', 
		'\x2', 'N', 'P', '\a', '\xE', '\x2', '\x2', 'O', 'N', '\x3', '\x2', '\x2', 
		'\x2', 'P', 'Q', '\x3', '\x2', '\x2', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', 
		'\x2', 'Q', 'R', '\x3', '\x2', '\x2', '\x2', 'R', 'Y', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'U', '\a', '\n', '\x2', '\x2', 'T', 'V', '\a', '\xE', '\x2', 
		'\x2', 'U', 'T', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\x3', '\x2', '\x2', 
		'\x2', 'W', 'U', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\x3', '\x2', '\x2', 
		'\x2', 'X', 'Z', '\x3', '\x2', '\x2', '\x2', 'Y', 'S', '\x3', '\x2', '\x2', 
		'\x2', 'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 'Z', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '[', '\\', '\t', '\x4', '\x2', '\x2', '\\', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\v', '$', '(', '/', '\x36', '=', 'H', 'Q', 'W', 
		'Y',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
